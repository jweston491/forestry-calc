{"version":3,"sources":["helpers/validateCurrency.js","components/Result.js","helpers/ReturnResult.js","calculations/presentValue/SingleSum.js","calculations/presentValue/TerminatingAnnualSeries.js","calculations/presentValue/TerminatingPeriodicSeries.js","calculations/presentValue/PerpetualAnnualSeries.js","calculations/presentValue/PerpetualPeriodicSeries.js","calculations/futureValue/SingleSum.js","calculations/futureValue/TerminatingAnnualSeries.js","calculations/futureValue/TerminatingPeriodicSeries.js","calculations/annualPayment/InstallmentPayment.js","calculations/annualPayment/SinkingFund.js","calculations/inflationRateConversion/NominalToReal.js","calculations/inflationRateConversion/RealToNominal.js","calculations/netPresentValue/NetPresentValue.js","calculations/netPresentValue/SoilExpectationValue.js","calculations/netPresentValue/ForestValue.js","index.js"],"names":["validateCurrency","value","error","test","Result","result","format","amount","toFixed","toString","Intl","NumberFormat","style","currency","minimumFractionDigits","ReturnResult","SingleSum","useState","calcResult","initialValues","vn","n","i","onSubmit","values","Math","pow","errors","touched","resetForm","isValidating","Container","Row","Col","label","name","id","type","component","ReactstrapInput","validate","Button","onClick","TerminatingAnnualSeries","a","TerminatingPeriodicSeries","p","PerpetualAnnualSeries","PerpetualPeriodicSeries","v0","console","log","InstallmentPayment","SinkingFund","NominalToReal","inom","f","RealToNominal","ireal","NetPresentValue","1","cr","r","rows","setRows","calcRows","rowValues","rowNum","lineResult","push","diff","length","Object","keys","x","pop","reduce","b","map","row","className","abs","Label","for","as","required","nextRow","addRow","numRows","tempRows","removeRow","SoilExpectationValue","ec","y0","o","hr","yf","o_cr","sum","disabled","ForestValue","sev","App","settings","formula","targets","document","querySelectorAll","Array","prototype","forEach","call","target","dataset","window","fcSettings","ReactDOM","render"],"mappings":"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","file":"static/js/main.6525ea3b.chunk.js","sourcesContent":["export const validateCurrency = (value) => {\n    let error;\n   if (!/^[0-9]+(\\.[0-9]{1,2})?$/i.test(value)) {\n     error = 'Invalid currency format';\n   }\n   return error;\n}","import React from \"react\";\nimport { ReturnResult } from '../helpers/ReturnResult.js';\n\nexport const Result = ( { result, format } ) => {\n    return(\n        <>\n            Result: { result ? ReturnResult( result, format ) : '0' }\n        </>\n    )\n}","export function ReturnResult( amount, format ) {\n  switch(format){\n    case 'percent':\n      amount = amount * 100;\n      amount = amount.toFixed(2).toString() + '%'\n      return amount\n      break;\n    default:\n      const formatter = new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: 2\n      })\n      amount = formatter.format( amount )\n      return amount;\n  }\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2\n  })\n  amount = formatter.format( amount )\n  return amount;\n}","import React, { useState } from \"react\";\nimport { Field, Formik, Form } from \"formik\";\nimport { ReactstrapInput } from \"reactstrap-formik\";\n\nimport { Button, Col, Row, Container } from \"reactstrap\";\nimport { validateCurrency } from 'helpers/validateCurrency'\nimport { Result } from 'components/Result'\n\n\nexport const SingleSum = () => {\n    const [result, calcResult ] = useState(0);\n    return (\n        <>\n        <Formik\n            initialValues={{ \n                /**\n                 * vn = Future value at year n\n                 * n = Number of years\n                 * i = Interest rate\n                 */\n                vn: \"\",\n                n: \"\",\n                i: \"\",\n            }}\n            onSubmit={ ( values ) => {\n                // Calculations go here\n                let { vn, n, i, result } = values\n\n                //Convert entered value to an actual percent\n                i = i / 100\n\n                result = ((vn) / Math.pow( (1 + i ), n ) )\n                calcResult( result );\n            }}\n            >\n                {({ errors, touched, isValidating, resetForm }) => (\n                    <Container>\n                        <Row>\n                            <Col>\n                                <Form>\n                                    <Field\n                                        label=\"Future Value ($): \" \n                                        name=\"vn\"\n                                        id=\"vn\"\n                                        type=\"number\"\n                                        component={ReactstrapInput}\n                                        validate={validateCurrency}\n                                    />\n                                    {errors.vn && touched.vn}\n                                    <Field \n                                        label=\"Number of Years:\"\n                                        type=\"number\"\n                                        name=\"n\" \n                                        id=\"n\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <Field \n                                        label=\"Interest Rate (%):\"\n                                        type=\"number\"\n                                        name=\"i\" \n                                        id=\"i\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <em>Ex. 5% = 5</em>\n                                    <br/><br/>\n                                    <Button type=\"submit\">Calculate</Button>\n                                    <br/><br/>\n                                    <Result result={ result } />\n                                    <br/><br/>\n                                    <Button onClick={()=>{resetForm(); calcResult(0)}}>Reset Form</Button>\n                                </Form>\n                            </Col>\n                        </Row>\n                    </Container>\n                    \n                )}\n        </Formik>\n        </>\n    );\n};\n\n// import * as serviceWorker from './serviceWorker';\n","import React, { useState } from \"react\";\nimport { Field, Formik, Form } from \"formik\";\nimport { ReactstrapInput } from \"reactstrap-formik\";\n\nimport { Button, Col, Row, Container } from \"reactstrap\";\nimport { validateCurrency } from 'helpers/validateCurrency'\nimport { Result } from 'components/Result'\n\n// import * as serviceWorker from './serviceWorker';\n\nexport const TerminatingAnnualSeries = () => {\n    const [result, calcResult ] = useState(0);\n    return (\n        <>\n        <Formik\n            initialValues={{ \n                /**\n                 * a = Payment amount \n                 * n = Number of years\n                 * i = Interest rate\n                 */\n                a: \"\",\n                n: \"\",\n                i: \"\",\n            }}\n            onSubmit={ ( values ) => {\n                // Calculations go here\n                let { a, n, i, result } = values\n                \n                //Convert entered value to an actual percent\n                i = i / 100\n\n                result = a * ( ( Math.pow( ( 1 + i ), n ) - 1 ) / ( i * ( Math.pow( ( 1 + i ), n ) ) ) )\n                calcResult( result );\n            }}\n            >\n                {({ errors, touched, resetForm, isValidating }) => (\n                    <Container>\n                        <Row>\n                            <Col>\n                                <Form>\n                                    <Field\n                                        label=\"Payment Amount ($): \" \n                                        name=\"a\"\n                                        id=\"a\"\n                                        type=\"number\"\n                                        component={ReactstrapInput}\n                                        validate={validateCurrency}\n                                    />\n                                    {errors.a && touched.a}\n                                    <Field \n                                        label=\"Number of Years:\"\n                                        type=\"number\"\n                                        name=\"n\" \n                                        id=\"n\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <Field \n                                        label=\"Interest Rate (%):\"\n                                        type=\"number\"\n                                        name=\"i\"\n                                        id=\"i\" \n                                        component={ReactstrapInput}\n                                    />\n                                    <em>Ex. 5% = 5</em>\n                                    <br/><br/>\n                                    <Button type=\"submit\">Calculate</Button>\n                                    <br/><br/>\n                                    <Result result={ result } />\n                                    <br/><br/>\n                                    <Button onClick={()=>{resetForm(); calcResult(0)}}>Reset Form</Button>\n                                </Form>\n                            </Col>\n                        </Row>\n                    </Container>\n                    \n                )}\n        </Formik>\n        </>\n    );\n};\n\n// import * as serviceWorker from './serviceWorker';\n","import React, { useState } from \"react\";\nimport { Field, Formik, Form } from \"formik\";\nimport { ReactstrapInput } from \"reactstrap-formik\";\n\nimport { Button, Col, Row, Container } from \"reactstrap\";\nimport { validateCurrency } from 'helpers/validateCurrency'\nimport { Result } from 'components/Result'\n\n// import * as serviceWorker from './serviceWorker';\n\nexport const TerminatingPeriodicSeries = () => {\n    const [result, calcResult ] = useState(0);\n    return (\n        <>\n        <Formik\n            initialValues={{ \n                /**\n                 * a = Payment amount \n                 * n = Number of years\n                 * i = Interest rate\n                 * p = Payment period\n                 */\n                a: \"\",\n                n: \"\",\n                i: \"\",\n                p: \"\"\n            }}\n            onSubmit={ ( values ) => {\n                // Calculations go here\n                let { a, n, i, p, result } = values\n                \n                //Convert entered value to an actual percent\n                i = i / 100\n\n                result = a * ( ( Math.pow( ( 1 + i ), n ) - 1 ) / ( ( ( Math.pow( ( 1 + i ), p ) - 1 ) * ( Math.pow( ( 1 + i ), n ) ) ) ) )\n                calcResult( result );\n            }}\n            >\n                {({ errors, touched, resetForm, isValidating }) => (\n                    <Container>\n                        <Row>\n                            <Col>\n                                <Form>\n                                    <Field\n                                        label=\"Payment Amount ($): \" \n                                        name=\"a\"\n                                        id=\"a\"\n                                        type=\"number\"\n                                        component={ReactstrapInput}\n                                        validate={validateCurrency}\n                                    />\n                                    {errors.a && touched.a}\n                                    <Field \n                                        label=\"Payment period (Years)\"\n                                        type=\"number\"\n                                        name=\"p\" \n                                        id=\"p\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <Field \n                                        label=\"Number of Years:\"\n                                        type=\"number\"\n                                        name=\"n\" \n                                        id=\"n\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <Field \n                                        label=\"Interest Rate (%):\"\n                                        type=\"number\"\n                                        name=\"i\" \n                                        id=\"i\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <em>Ex. 5% = 5</em>\n                                    <br/><br/>\n                                    <Button type=\"submit\">Calculate</Button>\n                                    <br/><br/>\n                                    <Result result={ result } />\n                                    <br/><br/>\n                                    <Button onClick={()=>{resetForm(); calcResult(0)}}>Reset Form</Button>\n                                </Form>\n                            </Col>\n                        </Row>\n                    </Container>\n                    \n                )}\n        </Formik>\n        </>\n    );\n};\n\n// import * as serviceWorker from './serviceWorker';\n","import React, { useState } from \"react\";\nimport { Field, Formik, Form } from \"formik\";\nimport { ReactstrapInput } from \"reactstrap-formik\";\n\nimport { Button, Col, Row, Container } from \"reactstrap\";\nimport { validateCurrency } from 'helpers/validateCurrency'\nimport { Result } from 'components/Result'\n\n// import * as serviceWorker from './serviceWorker';\n\nexport const PerpetualAnnualSeries = () => {\n    const [result, calcResult ] = useState(0);\n    return (\n        <>\n        <Formik\n            initialValues={{ \n                /**\n                 * a = Payment amount \n                 * i = Interest rate\n                 */\n                a: \"\",\n                i: \"\",\n            }}\n            onSubmit={ ( values ) => {\n                // Calculations go here\n                let { a, i, result } = values\n                \n                //Convert entered value to an actual percent\n                i = i / 100\n\n                result = a / i\n                result = calcResult( result )\n            }}\n            >\n                {({ errors, touched, resetForm, isValidating }) => (\n                    <Container>\n                        <Row>\n                            <Col>\n                                <Form>\n                                    <Field\n                                        label=\"Payment Amount ($): \" \n                                        name=\"a\"\n                                        id=\"a\"\n                                        type=\"number\"\n                                        component={ReactstrapInput}\n                                        validate={validateCurrency}\n                                    />\n                                    {errors.a && touched.a}\n                                    <Field \n                                        label=\"Interest Rate (%):\"\n                                        type=\"number\"\n                                        name=\"i\" \n                                        id=\"i\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <em>Ex. 5% = 5</em>\n                                    <br/><br/>\n                                    <Button type=\"submit\">Calculate</Button>\n                                    <br/><br/>\n                                    <Result result={ result } />\n                                    <br/><br/>\n                                    <Button onClick={()=>{resetForm(); calcResult(0)}}>Reset Form</Button>\n                                </Form>\n                            </Col>\n                        </Row>\n                    </Container>\n                    \n                )}\n        </Formik>\n        </>\n    );\n};\n\n// import * as serviceWorker from './serviceWorker';\n","import React, { useState } from \"react\";\nimport { Field, Formik, Form } from \"formik\";\nimport { ReactstrapInput } from \"reactstrap-formik\";\n\nimport { Button, Col, Row, Container } from \"reactstrap\";\nimport { validateCurrency } from 'helpers/validateCurrency'\nimport { Result } from 'components/Result'\n\n// import * as serviceWorker from './serviceWorker';\n\nexport const PerpetualPeriodicSeries = () => {\n    const [result, calcResult ] = useState(0);\n    return (\n        <>\n        <Formik\n            initialValues={{ \n                /**\n                 * a = Payment amount \n                 * p = Payment period\n                 * i = Interest rate\n                 */\n                a: \"\",\n                p: \"\",\n                i: \"\",\n            }}\n            onSubmit={ ( values ) => {\n                // Calculations go here\n                let { a, p, i, result } = values\n                \n                //Convert entered value to an actual percent\n                i = i / 100\n\n                result = a * ( 1 / ( Math.pow( ( 1 + i ), p ) - 1 ) )\n                calcResult( result );\n            }}\n            >\n                {({ errors, touched, resetForm, isValidating }) => (\n                    <Container>\n                        <Row>\n                            <Col>\n                                <Form>\n                                    <Field\n                                        label=\"Payment Amount ($): \" \n                                        name=\"a\"\n                                        id=\"a\"\n                                        type=\"number\"\n                                        component={ReactstrapInput}\n                                        validate={validateCurrency}\n                                    />\n                                    {errors.a && touched.a}\n                                    <Field \n                                        label=\"Payment Period (years):\"\n                                        type=\"number\"\n                                        name=\"p\" \n                                        id=\"p\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <Field \n                                        label=\"Interest Rate (%):\"\n                                        type=\"number\"\n                                        name=\"i\"\n                                        id=\"i\" \n                                        component={ReactstrapInput}\n                                    />\n                                    <em>Ex. 5% = 5</em>\n                                    <br/><br/>\n                                    <Button type=\"submit\">Calculate</Button>\n                                    <br/><br/>\n                                    <Result result={ result } />\n                                    <br/><br/>\n                                    <Button onClick={()=>{resetForm(); calcResult(0)}}>Reset Form</Button>\n                                </Form>\n                            </Col>\n                        </Row>\n                    </Container>\n                    \n                )}\n        </Formik>\n        </>\n    );\n};\n\n// import * as serviceWorker from './serviceWorker';\n","import React, { useState } from \"react\";\nimport { Field, Formik, Form } from \"formik\";\nimport { ReactstrapInput } from \"reactstrap-formik\";\n\nimport { Button, Col, Row, Container } from \"reactstrap\";\nimport { validateCurrency } from 'helpers/validateCurrency'\nimport { Result } from 'components/Result'\n\n\nexport const SingleSum = () => {\n    const [result, calcResult ] = useState(0);\n    return (\n        <>\n        <Formik\n            initialValues={{ \n                /**\n                 * v0 = Present value\n                 * n = Number of years\n                 * i = interest rate\n                 */\n                v0: \"\",\n                n: \"\",\n                i: \"\",\n            }}\n            onSubmit={ ( values ) => {\n                // Calculations go here\n                let { v0, n, i, result } = values\n\n                //Convert entered value to an actual percent\n                i = i / 100\n\n                result = v0 * ( Math.pow( ( 1 + i ), n ) )\n                calcResult( result );\n            }}\n            >\n                {({ errors, touched, resetForm, isValidating }) => (\n                    <Container>\n                        <Row>\n                            <Col>\n                                <Form>\n                                    <Field\n                                        label=\"Present Value ($): \" \n                                        name=\"v0\"\n                                        id=\"v0\"\n                                        type=\"number\"\n                                        component={ReactstrapInput}\n                                        validate={validateCurrency}\n                                    />\n                                    {errors.v0 && touched.v0}\n                                    <Field \n                                        label=\"Number of Years:\"\n                                        type=\"number\"\n                                        name=\"n\" \n                                        id=\"n\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <Field \n                                        label=\"Interest Rate (%):\"\n                                        type=\"number\"\n                                        name=\"i\" \n                                        id=\"i\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <em>Ex. 5% = 5</em>\n                                    <br/><br/>\n                                    <Button type=\"submit\">Calculate</Button>\n                                    <br/><br/>\n                                    <Result result={ result } />\n                                    <br/><br/>\n                                    <Button onClick={()=>{resetForm(); calcResult(0)}}>Reset Form</Button>\n                                </Form>\n                            </Col>\n                        </Row>\n                    </Container>\n                    \n                )}\n        </Formik>\n        </>\n    );\n};\n\n// import * as serviceWorker from './serviceWorker';\n","import React, { useState } from \"react\";\nimport { Field, Formik, Form } from \"formik\";\nimport { ReactstrapInput } from \"reactstrap-formik\";\n\nimport { Button, Col, Row, Container } from \"reactstrap\";\nimport { validateCurrency } from 'helpers/validateCurrency'\nimport { Result } from 'components/Result'\n\n// import * as serviceWorker from './serviceWorker';\n\nexport const TerminatingAnnualSeries = () => {\n    const [result, calcResult ] = useState(0);\n    return (\n        <>\n        <Formik\n            initialValues={{ \n                /**\n                 * a = Payment amount \n                 * n = Number of years\n                 * i = Interest rate\n                 */\n                a: \"\",\n                n: \"\",\n                i: \"\",\n            }}\n            onSubmit={ ( values ) => {\n                console.log(values)\n                // Calculations go here\n                let { a, n, i, result } = values\n                \n                //Convert entered value to an actual percent\n                i = i / 100\n\n                result = a * ( ( Math.pow( ( 1 + i ), n ) - 1 ) / i )\n                calcResult( result );\n            }}\n            >\n                {({ errors, touched, resetForm, isValidating }) => (\n                    <Container>\n                        <Row>\n                            <Col>\n                                <Form>\n                                    <Field\n                                        label=\"Payment Amount ($): \" \n                                        name=\"a\"\n                                        id=\"a\"\n                                        type=\"number\"\n                                        component={ReactstrapInput}\n                                        validate={validateCurrency}\n                                    />\n                                    {errors.a && touched.a}\n                                    <Field \n                                        label=\"Number of Years:\"\n                                        type=\"number\"\n                                        name=\"n\" \n                                        id=\"n\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <Field \n                                        label=\"Interest Rate (%):\"\n                                        type=\"number\"\n                                        name=\"i\"\n                                        id=\"i\" \n                                        component={ReactstrapInput}\n                                    />\n                                    <em>Ex. 5% = 5</em>\n                                    <br/><br/>\n                                    <Button type=\"submit\">Calculate</Button>\n                                    <br/><br/>\n                                    <Result result={ result } />\n                                    <br/><br/>\n                                    <Button onClick={()=>{resetForm(); calcResult(0)}}>Reset Form</Button>\n                                </Form>\n                            </Col>\n                        </Row>\n                    </Container>\n                    \n                )}\n        </Formik>\n        </>\n    );\n};\n\n// import * as serviceWorker from './serviceWorker';\n","import React, { useState } from \"react\";\nimport { Field, Formik, Form } from \"formik\";\nimport { ReactstrapInput } from \"reactstrap-formik\";\n\nimport { Button, Col, Row, Container } from \"reactstrap\";\nimport { validateCurrency } from 'helpers/validateCurrency'\nimport { Result } from 'components/Result'\n\n// import * as serviceWorker from './serviceWorker';\n\nexport const TerminatingPeriodicSeries = () => {\n    const [result, calcResult ] = useState(0);\n    return (\n        <>\n        <Formik\n            initialValues={{ \n                /**\n                 * a = Payment amount \n                 * n = Number of years\n                 * i = Interest rate\n                 * p = Payment period\n                 */\n                a: \"\",\n                n: \"\",\n                i: \"\",\n                p: \"\"\n            }}\n            onSubmit={ ( values ) => {\n                // Calculations go here\n                let { a, n, i, p, result } = values\n                \n                //Convert entered value to an actual percent\n                i = i / 100\n\n                result = a * ( ( Math.pow( ( 1 + i ), n ) - 1 ) / ( ( Math.pow( ( 1 + i ), p ) - 1 ) ) )\n\n                \n                \n                calcResult( result );\n            }}\n            >\n                {({ errors, touched, resetForm, isValidating }) => (\n                    <Container>\n                        <Row>\n                            <Col>\n                                <Form>\n                                    <Field\n                                        label=\"Payment Amount ($): \" \n                                        name=\"a\"\n                                        id=\"a\"\n                                        type=\"number\"\n                                        component={ReactstrapInput}\n                                        validate={validateCurrency}\n                                    />\n                                    {errors.a && touched.a}\n                                    <Field \n                                        label=\"Payment period (Years)\"\n                                        type=\"number\"\n                                        name=\"p\" \n                                        id=\"p\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <Field \n                                        label=\"Number of Years:\"\n                                        type=\"number\"\n                                        name=\"n\" \n                                        id=\"n\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <Field \n                                        label=\"Interest Rate (%):\"\n                                        type=\"number\"\n                                        name=\"i\" \n                                        id=\"i\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <em>Ex. 5% = 5</em>\n                                    <br/><br/>\n                                    <Button type=\"submit\">Calculate</Button>\n                                    <br/><br/>\n                                    <Result result={ result } />\n                                    <br/><br/>\n                                    <Button onClick={()=>{resetForm(); calcResult(0)}}>Reset Form</Button>\n                                </Form>\n                            </Col>\n                        </Row>\n                    </Container>\n                    \n                )}\n        </Formik>\n        </>\n    );\n};\n\n// import * as serviceWorker from './serviceWorker';\n","import React, { useState } from \"react\";\nimport { Field, Formik, Form } from \"formik\";\nimport { ReactstrapInput } from \"reactstrap-formik\";\n\nimport { Button, Col, Row, Container } from \"reactstrap\";\nimport { validateCurrency } from 'helpers/validateCurrency'\nimport { Result } from 'components/Result'\n\n\nexport const InstallmentPayment = () => {\n    const [result, calcResult ] = useState(0);\n    return (\n        <>\n        <Formik\n            initialValues={{ \n                /**\n                 * v0 = Present value\n                 * n = Number of years\n                 * i = interest rate\n                 */\n                v0: \"\",\n                n: \"\",\n                i: \"\",\n            }}\n            onSubmit={ ( values ) => {\n                // Calculations go here\n                let { v0, n, i, result } = values\n\n                //Convert entered value to an actual percent\n                i = i / 100\n\n                result = v0 * ( i * ( Math.pow( ( 1 + i ), n ) ) ) / ( Math.pow( ( 1 + i ), n ) - 1 )\n                calcResult( result );\n            }}\n            >\n                {({ errors, touched, resetForm, isValidating }) => (\n                    <Container>\n                        <Row>\n                            <Col>\n                                <Form>\n                                    <Field\n                                        label=\"Present Value ($): \" \n                                        name=\"v0\"\n                                        id=\"v0\"\n                                        type=\"number\"\n                                        component={ReactstrapInput}\n                                        validate={validateCurrency}\n                                    />\n                                    {errors.v0 && touched.v0}\n                                    <Field \n                                        label=\"Number of Years:\"\n                                        type=\"number\"\n                                        name=\"n\" \n                                        id=\"n\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <Field \n                                        label=\"Interest Rate (%):\"\n                                        type=\"number\"\n                                        name=\"i\" \n                                        id=\"i\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <em>Ex. 5% = 5</em>\n                                    <br/><br/>\n                                    <Button type=\"submit\">Calculate</Button>\n                                    <br/><br/>\n                                    <Result result={ result } />\n                                    <br/><br/>\n                                    <Button onClick={()=>{resetForm(); calcResult(0)}}>Reset Form</Button>\n                                </Form>\n                            </Col>\n                        </Row>\n                    </Container>\n                    \n                )}\n        </Formik>\n        </>\n    );\n};\n\n// import * as serviceWorker from './serviceWorker';\n","import React, { useState } from \"react\";\nimport { Field, Formik, Form } from \"formik\";\nimport { ReactstrapInput } from \"reactstrap-formik\";\n\nimport { Button, Col, Row, Container } from \"reactstrap\";\nimport { validateCurrency } from 'helpers/validateCurrency'\nimport { Result } from 'components/Result'\n\n\nexport const SinkingFund = () => {\n    const [result, calcResult ] = useState(0);\n    return (\n        <>\n        <Formik\n            initialValues={{ \n                /**\n                 * vn = Future value\n                 * n = Number of years\n                 * i = interest rate\n                 */\n                vn: \"\",\n                n: \"\",\n                i: \"\",\n            }}\n            onSubmit={ ( values ) => {\n                // Calculations go here\n                let { vn, n, i, result } = values\n\n                //Convert entered value to an actual percent\n                i = i / 100\n\n                result = vn * ( i / ( Math.pow( ( 1 + i ), n ) - 1 ) )\n                calcResult( result );\n            }}\n            >\n                {({ errors, touched, resetForm, isValidating }) => (\n                    <Container>\n                        <Row>\n                            <Col>\n                                <Form>\n                                    <Field\n                                        label=\"Future Value ($): \" \n                                        name=\"vn\"\n                                        id=\"vn\"\n                                        type=\"number\"\n                                        component={ReactstrapInput}\n                                        validate={validateCurrency}\n                                    />\n                                    {errors.vn && touched.vn}\n                                    <Field \n                                        label=\"Number of Years:\"\n                                        type=\"number\"\n                                        name=\"n\" \n                                        id=\"n\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <Field \n                                        label=\"Interest Rate (%):\"\n                                        type=\"number\"\n                                        name=\"i\" \n                                        id=\"i\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <em>Ex. 5% = 5</em>\n                                    <br/><br/>\n                                    <Button type=\"submit\">Calculate</Button>\n                                    <br/><br/>\n                                    <Result result={ result } />\n                                    <br/><br/>\n                                    <Button onClick={()=>{resetForm(); calcResult(0)}}>Reset Form</Button>\n                                </Form>\n                            </Col>\n                        </Row>\n                    </Container>\n                    \n                )}\n        </Formik>\n        </>\n    );\n};\n\n// import * as serviceWorker from './serviceWorker';\n","import React, { useState } from \"react\";\nimport { Field, Formik, Form } from \"formik\";\nimport { ReactstrapInput } from \"reactstrap-formik\";\n\nimport { Button, Col, Row, Container } from \"reactstrap\";\nimport { validateCurrency } from 'helpers/validateCurrency'\nimport { Result } from 'components/Result'\n\n\nexport const NominalToReal = () => {\n    const [result, calcResult ] = useState(0);\n    return (\n        <>\n        <Formik\n            initialValues={{ \n                /**\n                 * inom = nominal interest rate\n                 * f = inflation rate\n                 */\n                inom: \"\",\n                f: \"\",\n            }}\n            onSubmit={ ( values ) => {\n                // Calculations go here\n                let { inom, f, result } = values\n\n                //Convert entered value to an actual percent\n                inom = inom / 100\n                f = f / 100\n\n                result = ( ( 1 + inom ) / ( 1 + f ) ) - 1\n                calcResult( result );\n            }}\n            >\n                {( { resetForm } ) => (\n                    <Container>\n                        <Row>\n                            <Col>\n                                <Form>\n                                    <Field \n                                        label=\"Nominal interest rate:\"\n                                        type=\"number\"\n                                        name=\"inom\" \n                                        id=\"inom\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <em>Ex. 5% = 5</em>\n                                    <br/><br/>\n                                    <Field \n                                        label=\"Inflation rate:\"\n                                        type=\"number\"\n                                        name=\"f\" \n                                        id=\"f\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <em>Ex. 5% = 5</em>\n                                    <br/><br/>\n                                    <Button type=\"submit\">Calculate</Button>\n                                    <br/><br/>\n                                    <Result \n                                        result={ result }\n                                        format={ 'percent' } \n                                    />\n                                    <br/><br/>\n                                    <Button onClick={()=>{resetForm(); calcResult(0)}}>Reset Form</Button>\n                                </Form>\n                            </Col>\n                        </Row>\n                    </Container>\n                    \n                )}\n        </Formik>\n        </>\n    );\n};\n\n// import * as serviceWorker from './serviceWorker';\n","import React, { useState } from \"react\";\nimport { Field, Formik, Form } from \"formik\";\nimport { ReactstrapInput } from \"reactstrap-formik\";\n\nimport { Button, Col, Row, Container } from \"reactstrap\";\nimport { validateCurrency } from 'helpers/validateCurrency'\nimport { Result } from 'components/Result'\n\n\nexport const RealToNominal = () => {\n    const [result, calcResult ] = useState(0);\n    return (\n        <>\n        <Formik\n            initialValues={{ \n                /**\n                 * ireal = Real interest rate\n                 * f = inflation rate\n                 */\n                ireal: \"\",\n                f: \"\",\n            }}\n            onSubmit={ ( values ) => {\n                // Calculations go here\n                let { ireal, f, result } = values\n\n                //Convert entered value to an actual percent\n                ireal = ireal / 100\n                f = f / 100\n\n                result = ( ( 1 + ireal ) / ( 1 + f ) ) - 1\n\n                result = ((ireal + 1) * (1 + f)) - 1\n                calcResult( result );\n            }}\n            >\n                {( { resetForm } ) => (\n                    <Container>\n                        <Row>\n                            <Col>\n                                <Form>\n                                    <Field \n                                        label=\"Real interest rate:\"\n                                        type=\"number\"\n                                        name=\"ireal\" \n                                        id=\"ireal\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <em>Ex. 5% = 5</em>\n                                    <br/><br/>\n                                    <Field \n                                        label=\"Inflation rate:\"\n                                        type=\"number\"\n                                        name=\"f\" \n                                        id=\"f\"\n                                        component={ReactstrapInput}\n                                    />\n                                    <em>Ex. 5% = 5</em>\n                                    <br/><br/>\n                                    <Button type=\"submit\">Calculate</Button>\n                                    <br/><br/>\n                                    <Result \n                                        result={ result }\n                                        format={ 'percent' } \n                                    />\n                                    <br/><br/>\n                                    <Button onClick={()=>{resetForm(); calcResult(0)}}>Reset Form</Button>\n                                </Form>\n                            </Col>\n                        </Row>\n                    </Container>\n                    \n                )}\n        </Formik>\n        </>\n    );\n};\n\n// import * as serviceWorker from './serviceWorker';\n","import React, { useState } from \"react\";\nimport { Field, Formik, Form, FieldArray, withFormik } from \"formik\";\nimport { ReactstrapInput, ReactstrapRadio } from \"reactstrap-formik\";\n\nimport { Button, Col, Row, Container, Label, FormGroup, Input } from \"reactstrap\";\nimport { validateCurrency } from 'helpers/validateCurrency'\nimport { Result } from 'components/Result'\n\n// import * as serviceWorker from './serviceWorker';\n\nexport const NetPresentValue = () => {\n    const [result, calcResult ] = useState(0);\n\n    let initialValues = {\n        1 : {\n            a : '',\n            n : '',\n            cr: '',\n            r : ''\n        }\n    }\n\n    const [rows, setRows ] = useState({\n        ...initialValues\n    });\n\n    const addRow = () => {\n        let numRows = ''\n        if (typeof rows !== 'undefined'){\n            numRows = Object.keys(rows).length\n        } else {\n            numRows = 0\n        }\n        \n        let nextRow = numRows + 1\n        setRows(\n            {\n                ...rows, \n                [nextRow]: {\n                    a : '',\n                    n : '',\n                    cr: '',\n                    r : ''  \n                }\n            }\n        )\n    }\n\n    const removeRow = () => {\n        let numRows = ''\n        if (typeof rows !== 'undefined'){\n            numRows = Object.keys(rows).length\n            let tempRows = rows\n            delete tempRows[numRows]\n            setRows({...tempRows})\n        } else {\n            numRows = 0\n        }\n    }\n\n    return (\n        <>\n        <Formik\n            initialValues={{\n                calcRows: {\n                    ...rows\n                },\n                i: '5'\n            }}\n            onSubmit={ ( values ) => {\n                \n                let { i, calcRows, result } = values\n\n                //Convert entered value to an actual percent\n                i = i / 100\n\n                let rowValues = []\n\n                for( let rowNum in calcRows ){\n                    \n                    let { a, n, cr, r} = calcRows[rowNum]\n\n                    let costMulti = (\"revenue\" === cr ) ? 1 : -1\n\n                    a = a * costMulti\n\n                    let lineResult;\n                    if( typeof rows[rowNum] !== 'undefined'){\n                        if ( \"annual\" === r ) {\n                            lineResult = a * ( ( Math.pow( ( 1 + i ), n ) - 1 ) / ( i * ( Math.pow( ( 1 + i ), n ) ) ) )\n                        } else {\n                            lineResult = ((a) / Math.pow( (1 + i ), n ) )\n                        }\n                        rowValues.push(lineResult)\n                        console.log(rowValues)\n                    } else {\n                        let diff = rowValues.length - Object.keys(rows).length\n                        for(let x=1;x<=diff;x++){\n                            rowValues.pop(x)\n                        }\n                        console.log(rows)\n                    }\n\n                }\n\n                result = rowValues.reduce((a, b) => a + b, 0)\n                \n\n                calcResult(result);\n            }}\n            >\n                {({ errors, touched, resetForm, isValidating }) => (\n                    <Container>\n                        <Form>\n                            {  \n        \n                                Object.keys(rows).map((row, values) => (\n                                    \n                                    <Row className=\"d-flex align-items-end mb-4\">\n                                        <Col className=\"align-self-center\">\n                                            Cash Flow #{ Math.abs(row) }\n                                        </Col>\n                                        <Col>\n                                            <Label for={`calcRows.${row}.cr`}>\n                                                Cost/Revenue:\n                                            </Label>\n\n                                            <Field id={`calcRows.${row}.cr`} className=\"form-control\" as=\"select\" name={`calcRows.${row}.cr`}>\n                                                <option value=\"cost\">Cost</option>\n                                                <option value=\"revenue\">Revenue</option>\n                                            </Field>\n                                        </Col>\n                                        <Col>\n                                            <Field\n                                                label=\"Amount ($):\"\n                                                type=\"number\"\n                                                id={`calcRows.${row}.a`}\n                                                name={`calcRows.${row}.a`}\n                                                component={ReactstrapInput}\n                                                validate={validateCurrency}\n                                                className=\"mb-0\"\n                                                required\n                                            />\n                                            {errors.v0 && touched.v0}\n                                        </Col>\n                                        <Col>\n                                            <Label for={`calcRows.${row}.r`}>\n                                                One-Time/Annual:\n                                            </Label>\n                                            <Field className=\"form-control\" as=\"select\" id={`calcRows.${row}.r`} name={`calcRows.${row}.r`}>\n                                                <option value=\"one-time\">One-Time</option>\n                                                <option value=\"annual\">Annual</option>\n                                            </Field>\n                                        </Col>\n                                        <Col>\n                                            <Field\n                                                label=\"Year:\"\n                                                type=\"number\"\n                                                id={`calcRows.${row}.n`}\n                                                name={`calcRows.${row}.n`}\n                                                required\n                                                component={ReactstrapInput}\n                                            />\n                                        </Col>\n                                    </Row>\n                                ))\n                                \n                            }\n                            <Row>\n                                <Col className=\"col-md-3 col-12\">\n                                    <Field\n                                        label=\"Interest Rate (%):\"\n                                        type=\"number\"\n                                        id='i'\n                                        name='i'\n                                        required\n                                        component={ReactstrapInput}\n                                    />\n                                    <em>Ex. 5% = 5</em>\n                                </Col>\n                            </Row>\n                            <br/><br/>\n                            <Button\n                             onClick={()=>{addRow()}}>Add Cash Flow</Button>\n                             &nbsp;\n                             <Button\n                             onClick={()=>{removeRow()}}>Remove Cash Flow</Button>\n                             <br/><br/>\n                             <Button type=\"submit\">Calculate</Button>\n                             <br/><br/>\n                             <Result result={ result } />\n                             <br/><br/>\n                            <Button onClick={()=>{resetForm(); calcResult(0)}}>Reset Form</Button>\n                        </Form>\n                    </Container>\n                    \n                )}\n        </Formik>\n        </>\n    );\n};\n\n\n// import * as serviceWorker from './serviceWorker';\n","import React, { useState } from \"react\";\nimport { Field, Formik, Form, FieldArray, withFormik } from \"formik\";\nimport { ReactstrapInput, ReactstrapRadio } from \"reactstrap-formik\";\n\nimport { Button, Col, Row, Container, Label, FormGroup, Input } from \"reactstrap\";\nimport { validateCurrency } from 'helpers/validateCurrency'\nimport { Result } from 'components/Result'\n\n// import * as serviceWorker from './serviceWorker';\n\nexport const SoilExpectationValue = () => {\n    const [result, calcResult ] = useState(0);\n\n    let initialValues = {\n        1 : {\n            a : '',\n            n : '',\n            cr: '',\n        }\n    }\n\n    const [rows, setRows ] = useState({\n        ...initialValues\n    });\n\n    const addRow = () => {\n        let numRows = ''\n        if (typeof rows !== 'undefined'){\n            numRows = Object.keys(rows).length\n        } else {\n            numRows = 0\n        }\n        \n        let nextRow = numRows + 1\n        setRows(\n            {\n                ...rows, \n                [nextRow]: {\n                    a : '',\n                    n : '',\n                    cr: '',\n                }\n            }\n        )\n    }\n\n    const removeRow = () => {\n        let numRows = ''\n        if (typeof rows !== 'undefined'){\n            numRows = Object.keys(rows).length\n            let tempRows = rows\n            delete tempRows[numRows]\n            setRows({...tempRows})\n        } else {\n            numRows = 0\n        }\n    }\n\n    return (\n        <>\n        <Formik\n            initialValues={{\n                calcRows: {\n                    ...rows\n                },\n                ec : '',\n                i : '5',\n                y0: '0',\n                f : '',\n                o : '0',\n                hr: '',\n                yf: '',\n                o_cr: ''\n            }}\n            onSubmit={ ( values ) => {\n                \n                let { i, calcRows, ec, f, hr, yf, o, o_cr, result } = values\n\n                //Convert entered value to an actual percent\n                i = i / 100\n\n                let rowValues = []\n\n                for( let rowNum in calcRows ){\n                    \n                    let { a, n, cr } = calcRows[rowNum]\n\n                    let costMulti = (\"revenue\" === cr ) ? 1 : -1\n\n                    a = a * costMulti\n\n                    let lineResult;\n                    if( typeof rows[rowNum] !== 'undefined'){\n\n                        lineResult = a * ( Math.pow ( ( 1 + i ), ( f - n  ) ) )\n \n                        rowValues.push(lineResult)\n                        console.log(rowValues)\n                    } else {\n                        let diff = rowValues.length - Object.keys(rows).length\n                        for(let x=1;x<=diff;x++){\n                            rowValues.pop(x)\n                        }\n                    }\n\n                }\n\n                let sum = rowValues.reduce((a, b) => a + b, 0)\n\n                console.log(sum)\n\n                console.log(ec)\n                console.log(hr)\n\n                let costMulti = (\"revenue\" === o_cr ) ? 1 : -1\n\n                o = o * costMulti\n\n                console.log(o)\n\n                result = ( ( ec * -1 * ( Math.pow( ( 1 + i ), f ) ) + sum + hr ) / ( ( Math.pow( ( 1 + i ), f ) ) - 1 ) ) + ( o / i )\n                \n\n                calcResult(result);\n            }}\n            >\n                {({ errors, touched, resetForm, isValidating }) => (\n                    <Container>\n                        <Form>\n                            <Row className=\"d-flex align-items-end mb-4\">\n                                <Col className=\"align-self-center col-6\">\n                                    Establishment Cost:\n                                </Col>\n                                <Col className=\"col\">\n                                    <Field\n                                        label=\"Amount ($):\"\n                                        type=\"number\"\n                                        id='ec'\n                                        name='ec'\n                                        component={ReactstrapInput}\n                                        validate={validateCurrency}\n                                        required\n                                    />\n                                    {errors.v0 && touched.v0}\n                                </Col>\n                                <Col className=\"col\">\n                                    <Field\n                                        label=\"Year:\"\n                                        type=\"number\"\n                                        id='y0'\n                                        name='y0'\n                                        disabled\n                                        component={ReactstrapInput}\n                                    />\n                                </Col>\n                            </Row>\n                            {  \n        \n                                Object.keys(rows).map((row, values) => (\n                                    \n                                    <Row className=\"d-flex align-items-end mb-4\">\n                                        <Col className=\"align-self-center\">\n                                            Mid-Rotation #{ Math.abs(row) }\n                                        </Col>\n                                        <Col>\n                                            <Label for={`calcRows.${row}.cr`}>\n                                                Cost/Revenue:\n                                            </Label>\n\n                                            <Field id={`calcRows.${row}.cr`} className=\"form-control\" as=\"select\" name={`calcRows.${row}.cr`}>\n                                                <option value=\"cost\">Cost</option>\n                                                <option value=\"revenue\">Revenue</option>\n                                            </Field>\n                                        </Col>\n                                        <Col>\n                                            <Field\n                                                label=\"Amount ($):\"\n                                                type=\"number\"\n                                                id={`calcRows.${row}.a`}\n                                                name={`calcRows.${row}.a`}\n                                                component={ReactstrapInput}\n                                                validate={validateCurrency}\n                                                className=\"mb-0\"\n                                                required\n                                            />\n                                            {errors.v0 && touched.v0}\n                                        </Col>\n                                        <Col>\n                                            <Field\n                                                label=\"Year:\"\n                                                type=\"number\"\n                                                id={`calcRows.${row}.n`}\n                                                name={`calcRows.${row}.n`}\n                                                required\n                                                component={ReactstrapInput}\n                                            />\n                                        </Col>\n                                    </Row>\n                                ))\n                                \n                            }\n                            <Row className=\"d-flex align-items-end mb-4\">\n                                <Col className=\"align-self-center col-6\">\n                                    Final Harvest:\n                                </Col>\n                                <Col className=\"col\">\n                                    <Field\n                                        label=\"Amount ($):\"\n                                        type=\"number\"\n                                        id='hr'\n                                        name='hr'\n                                        component={ReactstrapInput}\n                                        validate={validateCurrency}\n                                    />\n                                    {errors.hr && touched.hr}\n                                </Col>\n                                <Col className=\"col\">\n                                    <Field\n                                        label=\"Year:\"\n                                        type=\"number\"\n                                        id='f'\n                                        name='f'\n                                        component={ReactstrapInput}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"d-flex align-items-end mb-4\">\n                                <Col className=\"align-self-center col-md-3\">\n                                    Net Annual Cash Flow:\n                                </Col>\n                                <Col className=\"col-md-3\">\n                                    <Label for='o_cr'>\n                                        Cost/Revenue:\n                                    </Label>\n\n                                    <Field id='o_cr' className=\"form-control\" as=\"select\" name='o_cr'>\n                                        <option value=\"cost\">Cost</option>\n                                        <option value=\"revenue\">Revenue</option>\n                                    </Field>\n                                </Col>\n                                <Col className=\"col-md-3\">\n                                    <Field\n                                        label=\"Amount ($):\"\n                                        type=\"number\"\n                                        id='o'\n                                        name='o'\n                                        component={ReactstrapInput}\n                                        validate={validateCurrency}\n                                    />\n                                    {errors.o && touched.o}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col className=\"col-md-3 col-12\">\n                                    <Field\n                                        label=\"Interest Rate (%):\"\n                                        type=\"number\"\n                                        id='i'\n                                        name='i'\n                                        required\n                                        component={ReactstrapInput}\n                                    />\n                                    <em>Ex. 5% = 5</em>\n                                </Col>\n                            </Row>\n                            <br/><br/>\n                            <Button\n                             onClick={()=>{addRow()}}>Add Cash Flow</Button>\n                             &nbsp;\n                             <Button\n                             onClick={()=>{removeRow()}}>Remove Cash Flow</Button>\n                             <br/><br/>\n                             <Button type=\"submit\">Calculate</Button>\n                             <br/><br/>\n                             <Result result={ result } />\n                             <br/><br/>\n                            <Button onClick={()=>{resetForm(); calcResult(0)}}>Reset Form</Button>\n                        </Form>\n                    </Container>\n                    \n                )}\n        </Formik>\n        </>\n    );\n};\n\n\n// import * as serviceWorker from './serviceWorker';\n","import React, { useState } from \"react\";\nimport { Field, Formik, Form, FieldArray, withFormik } from \"formik\";\nimport { ReactstrapInput, ReactstrapRadio } from \"reactstrap-formik\";\n\nimport { Button, Col, Row, Container, Label, FormGroup, Input } from \"reactstrap\";\nimport { validateCurrency } from 'helpers/validateCurrency'\nimport { Result } from 'components/Result'\n\n// import * as serviceWorker from './serviceWorker';\n\nexport const ForestValue = () => {\n    const [result, calcResult ] = useState(0);\n\n    let initialValues = {\n        1 : {\n            a : '',\n            n : '',\n            cr: '',\n        }\n    }\n\n    const [rows, setRows ] = useState({\n        ...initialValues\n    });\n\n    const addRow = () => {\n        let numRows = ''\n        if (typeof rows !== 'undefined'){\n            numRows = Object.keys(rows).length\n        } else {\n            numRows = 0\n        }\n        \n        let nextRow = numRows + 1\n        setRows(\n            {\n                ...rows, \n                [nextRow]: {\n                    a : '',\n                    n : '',\n                    cr: '',\n                }\n            }\n        )\n    }\n\n    const removeRow = () => {\n        let numRows = ''\n        if (typeof rows !== 'undefined'){\n            numRows = Object.keys(rows).length\n            let tempRows = rows\n            delete tempRows[numRows]\n            setRows({...tempRows})\n        } else {\n            numRows = 0\n        }\n    }\n\n    return (\n        <>\n        <Formik\n            initialValues={{\n                calcRows: {\n                    ...rows\n                },\n                sev : '',\n                i : '5',\n                y0: '0',\n                f : '',\n                o : '0',\n                yf: '',\n                o_cr: ''\n            }}\n            onSubmit={ ( values ) => {\n                \n                let { i, calcRows, sev, f, yf, o, o_cr, result } = values\n\n                //Convert entered value to an actual percent\n                i = i / 100\n\n                let rowValues = []\n\n                for( let rowNum in calcRows ){\n                    \n                    let { a, n, cr } = calcRows[rowNum]\n\n                    let costMulti = (\"revenue\" === cr ) ? 1 : -1\n\n                    a = a * costMulti\n\n                    let lineResult;\n                    if( typeof rows[rowNum] !== 'undefined'){\n\n                        lineResult = a / ( Math.pow( ( 1 + i ), n ) )\n \n                        rowValues.push(lineResult)\n\n                    } else {\n                        let diff = rowValues.length - Object.keys(rows).length\n                        for(let x=1;x<=diff;x++){\n                            rowValues.pop(x)\n                        }\n                    }\n\n                }\n\n                let sum = rowValues.reduce((a, b) => a + b, 0)\n                console.log(rowValues)\n                console.log(sum)\n\n                console.log(sev)\n\n                let costMulti = (\"revenue\" === o_cr ) ? 1 : -1\n\n                o = o * costMulti\n\n                console.log(o)\n\n                console.log(i, calcRows, sev, f, yf, o, o_cr, sum )\n\n                result = sum + ( f / Math.pow( ( 1 + i ), yf ) ) + ( o * ( ( Math.pow( ( 1 + i ), yf ) - 1 ) / ( i * Math.pow( ( 1 + i ), yf ) ) ) ) + ( sev / Math.pow( ( 1 + i ), yf ) )\n\n                calcResult(result);\n            }}\n            >\n                {({ errors, touched, resetForm, isValidating }) => (\n                    <Container>\n                        <Form>\n                            {  \n        \n                                Object.keys(rows).map((row, values) => (\n                                    \n                                    <Row className=\"d-flex align-items-end mb-4\">\n                                        <Col className=\"align-self-center\">\n                                            Mid-Rotation #{ Math.abs(row) }\n                                        </Col>\n                                        <Col>\n                                            <Label for={`calcRows.${row}.cr`}>\n                                                Cost/Revenue:\n                                            </Label>\n\n                                            <Field id={`calcRows.${row}.cr`} className=\"form-control\" as=\"select\" name={`calcRows.${row}.cr`}>\n                                                <option value=\"cost\">Cost</option>\n                                                <option value=\"revenue\">Revenue</option>\n                                            </Field>\n                                        </Col>\n                                        <Col>\n                                            <Field\n                                                label=\"Amount ($):\"\n                                                type=\"number\"\n                                                id={`calcRows.${row}.a`}\n                                                name={`calcRows.${row}.a`}\n                                                component={ReactstrapInput}\n                                                validate={validateCurrency}\n                                                className=\"mb-0\"\n                                                required\n                                            />\n                                            {/* {errors.calcRows`.${row}`.a && touched.calcRows`.${row}`.a} */}\n                                        </Col>\n                                        <Col>\n                                            <Field\n                                                label=\"Year:\"\n                                                type=\"number\"\n                                                id={`calcRows.${row}.n`}\n                                                name={`calcRows.${row}.n`}\n                                                required\n                                                component={ReactstrapInput}\n                                            />\n                                        </Col>\n                                    </Row>\n                                ))\n                                \n                            }\n                            <Row className=\"d-flex align-items-end mb-4\">\n                                <Col className=\"align-self-center col-md-3\">\n                                    Final Harvest:\n                                </Col>\n                                <Col className=\"col-md-3 offset-md-3\">\n                                    <Field\n                                        label=\"Amount ($):\"\n                                        type=\"number\"\n                                        id='f'\n                                        name='f'\n                                        component={ReactstrapInput}\n                                        validate={validateCurrency}\n                                    />\n                                    {errors.f && touched.f}\n                                </Col>\n                                <Col>\n                                    <Field\n                                        label=\"Year:\"\n                                        type=\"number\"\n                                        id='yf'\n                                        name='yf'\n                                        required\n                                        component={ReactstrapInput}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"d-flex align-items-end mb-4\">\n                                <Col className=\"align-self-center col-md-3\">\n                                    Net Annual Cash Flow\n                                </Col>\n                                <Col className=\"col-md-3\">\n                                    <Label for='o_cr'>\n                                        Cost/Revenue:\n                                    </Label>\n\n                                    <Field id='o_cr' className=\"form-control\" as=\"select\" name='o_cr'>\n                                        <option value=\"cost\">Cost</option>\n                                        <option value=\"revenue\">Revenue</option>\n                                    </Field>\n                                </Col>\n                                <Col className=\"col-md-3\">\n                                    <Field\n                                        label=\"Amount ($):\"\n                                        type=\"number\"\n                                        id='o'\n                                        name='o'\n                                        component={ReactstrapInput}\n                                        validate={validateCurrency}\n                                    />\n                                    {errors.o && touched.o}\n                                </Col>\n                            </Row>\n                            <Row className=\"d-flex align-items-end mb-4\">\n                                <Col className=\"align-self-center col-6\">\n                                    Land Value:\n                                </Col>\n                                <Col className=\"col-md-3\">\n                                    <Field\n                                        label=\"Amount ($):\"\n                                        type=\"number\"\n                                        id='sev'\n                                        name='sev'\n                                        component={ReactstrapInput}\n                                        validate={validateCurrency}\n                                    />\n                                    {errors.sev && touched.sev}\n                                </Col>\n    \n                            </Row>\n                            <Row>\n                                <Col className=\"col-md-3 col-12\">\n                                    <Field\n                                        label=\"Interest Rate (%):\"\n                                        type=\"number\"\n                                        id='i'\n                                        name='i'\n                                        required\n                                        component={ReactstrapInput}\n                                    />\n                                    <em>Ex. 5% = 5</em>\n                                </Col>\n                            </Row>\n                            <br/><br/>\n                            <Button\n                             onClick={()=>{addRow()}}>Add Cash Flow</Button>\n                             &nbsp;\n                             <Button\n                             onClick={()=>{removeRow()}}>Remove Cash Flow</Button>\n                             <br/><br/>\n                             <Button type=\"submit\">Calculate</Button>\n                             <br/><br/>\n                             <Result result={ result } />\n                             <br/><br/>\n                            <Button onClick={()=>{resetForm(); calcResult(0)}}>Reset Form</Button>\n                        </Form>\n                    </Container>\n                    \n                )}\n        </Formik>\n        </>\n    );\n};\n\n\n// import * as serviceWorker from './serviceWorker';\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport * as presentValue from './calculations/presentValue/';\nimport * as futureValue from './calculations/futureValue/';\nimport * as annualPayment from './calculations/annualPayment/';\nimport * as inflationRateConversion from './calculations/inflationRateConversion/';\nimport * as netPresentValue from './calculations/netPresentValue/';\n\nimport 'App.scss'\n\nfunction App( { settings } ) {\n    if ( !process.env.NODE_ENV || process.env.NODE_ENV === 'development' ) {\n        // Debug specific calculations as needed\n        return <presentValue.SingleSum/>\n    } \n    else {\n        switch (settings.formula) {\n            // Valid shortcode options\n            case 'present-value-single-sum':\n                return <presentValue.SingleSum />;\n            case 'present-value-terminating-annual-series':\n                return <presentValue.TerminatingAnnualSeries />;\n            case 'present-value-terminating-periodic-series':\n                return <presentValue.TerminatingPeriodicSeries />;\n            case 'present-value-perpetual-annual-series':\n                return <presentValue.PerpetualAnnualSeries />;\n            case 'present-value-perpetual-periodic-series':\n                return <presentValue.PerpetualPeriodicSeries />;\n            case 'annual-payment-installment-payment':\n                return <annualPayment.InstallmentPayment />;\n            case 'annual-payment-sinking-fund':\n                return <annualPayment.SinkingFund />;\n            case 'future-value-single-sum':\n                return <futureValue.SingleSum />;\n            case 'future-value-terminating-annual-series':\n                return <futureValue.TerminatingAnnualSeries />;\n            case 'future-value-terminating-periodic-series':\n                return <futureValue.TerminatingPeriodicSeries />;\n            case 'inflation-rate-conversion-nominal-to-real':\n                return <inflationRateConversion.NominalToReal />;\n            case 'inflation-rate-conversion-real-to-nominal':\n                return <inflationRateConversion.RealToNominal />;\n            case 'net-present-value-forest-value':\n                return <netPresentValue.ForestValue />;\n            case 'net-present-value-net-present-value':\n                return <netPresentValue.NetPresentValue />;\n            case 'net-present-value-soil-expectation-value':\n                return <netPresentValue.SoilExpectationValue />;\n        }\n    }\n}\n\nif ( !process.env.NODE_ENV || process.env.NODE_ENV === 'development' ) {\n    const target = document.getElementById('root');\n    if (target) { ReactDOM.render(<App />, target); }\n} else {\n    const targets = document.querySelectorAll('.fc-root');\n    Array.prototype.forEach.call(targets, target => {\n        const id = target.dataset.id;\n        const settings = window.fcSettings[id];\n        ReactDOM.render(<App settings={settings} />, target)\n    });\n}\n\n\n// serviceWorker.unregister();\n"],"sourceRoot":""}